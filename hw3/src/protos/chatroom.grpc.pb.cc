// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chatroom.proto

#include "chatroom.pb.h"
#include "chatroom.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace hw2 {

static const char* ChatRoomService_method_names[] = {
  "/hw2.ChatRoomService/GetServerAddr",
  "/hw2.ChatRoomService/Login",
  "/hw2.ChatRoomService/List",
  "/hw2.ChatRoomService/Join",
  "/hw2.ChatRoomService/Leave",
  "/hw2.ChatRoomService/ServerAlive",
  "/hw2.ChatRoomService/Chat",
  "/hw2.ChatRoomService/MasterHeartbeats",
  "/hw2.ChatRoomService/SlaveWatchdog",
  "/hw2.ChatRoomService/Election",
  "/hw2.ChatRoomService/NotifyNewLocalMaster",
  "/hw2.ChatRoomService/NotifyNewLocalSlave",
  "/hw2.ChatRoomService/NotifyNewNetMaster",
  "/hw2.ChatRoomService/GetNetMasterChatAddress",
  "/hw2.ChatRoomService/OnRequestedLock",
  "/hw2.ChatRoomService/OnReleasedLock",
  "/hw2.ChatRoomService/OnDataUpdated",
};

std::unique_ptr< ChatRoomService::Stub> ChatRoomService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ChatRoomService::Stub> stub(new ChatRoomService::Stub(channel));
  return stub;
}

ChatRoomService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetServerAddr_(ChatRoomService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(ChatRoomService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(ChatRoomService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Join_(ChatRoomService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Leave_(ChatRoomService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerAlive_(ChatRoomService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Chat_(ChatRoomService_method_names[6], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_MasterHeartbeats_(ChatRoomService_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SlaveWatchdog_(ChatRoomService_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Election_(ChatRoomService_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyNewLocalMaster_(ChatRoomService_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyNewLocalSlave_(ChatRoomService_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyNewNetMaster_(ChatRoomService_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNetMasterChatAddress_(ChatRoomService_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnRequestedLock_(ChatRoomService_method_names[14], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnReleasedLock_(ChatRoomService_method_names[15], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnDataUpdated_(ChatRoomService_method_names[16], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChatRoomService::Stub::GetServerAddr(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetServerAddr_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncGetServerAddrRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_GetServerAddr_, context, request);
}

::grpc::Status ChatRoomService::Stub::Login(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::Status ChatRoomService::Stub::List(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::ListReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::ListReply>* ChatRoomService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::Status ChatRoomService::Stub::Join(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Join_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncJoinRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Join_, context, request);
}

::grpc::Status ChatRoomService::Stub::Leave(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Leave_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncLeaveRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Leave_, context, request);
}

::grpc::Status ChatRoomService::Stub::ServerAlive(::grpc::ClientContext* context, const ::hw2::Request& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerAlive_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncServerAliveRaw(::grpc::ClientContext* context, const ::hw2::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_ServerAlive_, context, request);
}

::grpc::ClientReaderWriter< ::hw2::Message, ::hw2::Message>* ChatRoomService::Stub::ChatRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::hw2::Message, ::hw2::Message>(channel_.get(), rpcmethod_Chat_, context);
}

::grpc::ClientAsyncReaderWriter< ::hw2::Message, ::hw2::Message>* ChatRoomService::Stub::AsyncChatRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::hw2::Message, ::hw2::Message>::Create(channel_.get(), cq, rpcmethod_Chat_, context, tag);
}

::grpc::Status ChatRoomService::Stub::MasterHeartbeats(::grpc::ClientContext* context, const ::hw2::Process& request, ::hw2::Process* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_MasterHeartbeats_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Process>* ChatRoomService::Stub::AsyncMasterHeartbeatsRaw(::grpc::ClientContext* context, const ::hw2::Process& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Process>::Create(channel_.get(), cq, rpcmethod_MasterHeartbeats_, context, request);
}

::grpc::Status ChatRoomService::Stub::SlaveWatchdog(::grpc::ClientContext* context, const ::hw2::Process& request, ::hw2::Process* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SlaveWatchdog_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Process>* ChatRoomService::Stub::AsyncSlaveWatchdogRaw(::grpc::ClientContext* context, const ::hw2::Process& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Process>::Create(channel_.get(), cq, rpcmethod_SlaveWatchdog_, context, request);
}

::grpc::Status ChatRoomService::Stub::Election(::grpc::ClientContext* context, const ::hw2::Vote& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Election_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncElectionRaw(::grpc::ClientContext* context, const ::hw2::Vote& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_Election_, context, request);
}

::grpc::Status ChatRoomService::Stub::NotifyNewLocalMaster(::grpc::ClientContext* context, const ::hw2::ServerInfo& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_NotifyNewLocalMaster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncNotifyNewLocalMasterRaw(::grpc::ClientContext* context, const ::hw2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_NotifyNewLocalMaster_, context, request);
}

::grpc::Status ChatRoomService::Stub::NotifyNewLocalSlave(::grpc::ClientContext* context, const ::hw2::ServerInfo& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_NotifyNewLocalSlave_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncNotifyNewLocalSlaveRaw(::grpc::ClientContext* context, const ::hw2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_NotifyNewLocalSlave_, context, request);
}

::grpc::Status ChatRoomService::Stub::NotifyNewNetMaster(::grpc::ClientContext* context, const ::hw2::ServerInfo& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_NotifyNewNetMaster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncNotifyNewNetMasterRaw(::grpc::ClientContext* context, const ::hw2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_NotifyNewNetMaster_, context, request);
}

::grpc::Status ChatRoomService::Stub::GetNetMasterChatAddress(::grpc::ClientContext* context, const ::hw2::ServerInfo& request, ::hw2::ServerInfo* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetNetMasterChatAddress_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::ServerInfo>* ChatRoomService::Stub::AsyncGetNetMasterChatAddressRaw(::grpc::ClientContext* context, const ::hw2::ServerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::ServerInfo>::Create(channel_.get(), cq, rpcmethod_GetNetMasterChatAddress_, context, request);
}

::grpc::Status ChatRoomService::Stub::OnRequestedLock(::grpc::ClientContext* context, const ::hw2::ReqLock& request, ::hw2::ReqLock* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_OnRequestedLock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::ReqLock>* ChatRoomService::Stub::AsyncOnRequestedLockRaw(::grpc::ClientContext* context, const ::hw2::ReqLock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::ReqLock>::Create(channel_.get(), cq, rpcmethod_OnRequestedLock_, context, request);
}

::grpc::Status ChatRoomService::Stub::OnReleasedLock(::grpc::ClientContext* context, const ::hw2::Process& request, ::hw2::Process* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_OnReleasedLock_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Process>* ChatRoomService::Stub::AsyncOnReleasedLockRaw(::grpc::ClientContext* context, const ::hw2::Process& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Process>::Create(channel_.get(), cq, rpcmethod_OnReleasedLock_, context, request);
}

::grpc::Status ChatRoomService::Stub::OnDataUpdated(::grpc::ClientContext* context, const ::hw2::Command& request, ::hw2::Reply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_OnDataUpdated_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::hw2::Reply>* ChatRoomService::Stub::AsyncOnDataUpdatedRaw(::grpc::ClientContext* context, const ::hw2::Command& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::hw2::Reply>::Create(channel_.get(), cq, rpcmethod_OnDataUpdated_, context, request);
}

ChatRoomService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::GetServerAddr), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::Login), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Request, ::hw2::ListReply>(
          std::mem_fn(&ChatRoomService::Service::List), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::Join), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::Leave), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Request, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::ServerAlive), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[6],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< ChatRoomService::Service, ::hw2::Message, ::hw2::Message>(
          std::mem_fn(&ChatRoomService::Service::Chat), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Process, ::hw2::Process>(
          std::mem_fn(&ChatRoomService::Service::MasterHeartbeats), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Process, ::hw2::Process>(
          std::mem_fn(&ChatRoomService::Service::SlaveWatchdog), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Vote, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::Election), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::ServerInfo, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::NotifyNewLocalMaster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::ServerInfo, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::NotifyNewLocalSlave), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::ServerInfo, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::NotifyNewNetMaster), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::ServerInfo, ::hw2::ServerInfo>(
          std::mem_fn(&ChatRoomService::Service::GetNetMasterChatAddress), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[14],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::ReqLock, ::hw2::ReqLock>(
          std::mem_fn(&ChatRoomService::Service::OnRequestedLock), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[15],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Process, ::hw2::Process>(
          std::mem_fn(&ChatRoomService::Service::OnReleasedLock), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ChatRoomService_method_names[16],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChatRoomService::Service, ::hw2::Command, ::hw2::Reply>(
          std::mem_fn(&ChatRoomService::Service::OnDataUpdated), this)));
}

ChatRoomService::Service::~Service() {
}

::grpc::Status ChatRoomService::Service::GetServerAddr(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::Login(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::List(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::Join(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::Leave(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::ServerAlive(::grpc::ServerContext* context, const ::hw2::Request* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::Chat(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::hw2::Message, ::hw2::Message>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::MasterHeartbeats(::grpc::ServerContext* context, const ::hw2::Process* request, ::hw2::Process* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::SlaveWatchdog(::grpc::ServerContext* context, const ::hw2::Process* request, ::hw2::Process* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::Election(::grpc::ServerContext* context, const ::hw2::Vote* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::NotifyNewLocalMaster(::grpc::ServerContext* context, const ::hw2::ServerInfo* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::NotifyNewLocalSlave(::grpc::ServerContext* context, const ::hw2::ServerInfo* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::NotifyNewNetMaster(::grpc::ServerContext* context, const ::hw2::ServerInfo* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::GetNetMasterChatAddress(::grpc::ServerContext* context, const ::hw2::ServerInfo* request, ::hw2::ServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::OnRequestedLock(::grpc::ServerContext* context, const ::hw2::ReqLock* request, ::hw2::ReqLock* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::OnReleasedLock(::grpc::ServerContext* context, const ::hw2::Process* request, ::hw2::Process* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatRoomService::Service::OnDataUpdated(::grpc::ServerContext* context, const ::hw2::Command* request, ::hw2::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hw2

